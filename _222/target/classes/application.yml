spring:
  profiles:
    active: ${activatedProfile}      #使用ci配置文件
eureka:
  instance:
    preferIpAddress: true
    instanceId: ${spring.cloud.client.ip-address}:${server.port}   #eureka上用IP和端口标识服务
    lease-expiration-duration-in-seconds: 30 # default 90s   超过此时间没收到下一次心跳，则将移除该服务
    lease-renewal-interval-in-seconds: 10 # default 30s    多少秒发送一次心跳
    metadata-map:
      upstream_version: ${version}           #设置版本，相同版本间才是一个系统（才可以相互调用）
  client:
    enabled: true      #开启client端功能
    registerWithEureka: true
    registryFetchIntervalSeconds: 10 # default 30s
    fetchRegistry: true        #客户端是否从 Eureka Server 获取实例注册信息（client端肯定为true，service端为false）
    healthcheck:
      enabled: true     #使用health端点来代替心跳表明服务是否可用，反应到eureka server ui上服务的UP还是DOWN，这样的话可以用请求来使服务下线

store:
  enabled: true
  repository: REDIS #REDIS #IN-MEMORY
  inMemory:
    initialDelay: 10000 # in milliseconds
    period: 10000 # in milliseconds
  redis:
    useRedisTimeout: true


ribbon:
  ConnectTimeout: 250 # 连接超时时间（ms），默认值为250ms
  ReadTimeout: 2000 # 通信超时时间（ms），默认值为2000ms
  OkToRetryOnAllOperations: true # 是否对所有操作都进行重试
  MaxAutoRetriesNextServer: 2 # 对同一服务不同实例重试次数（同一服务下集群个数的重试次数）
  MaxAutoRetries: 2 # 对同一实例重试的次数（单个集群节点服务重试的次数）

# 开启熔断机制，超过六秒即开启熔断机制，网关内的时间排序：zuul的通信时间 > hystrix熔断时间 > retry重试时间
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 6000
